[
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "communeRS",
    "section": "",
    "text": "Copyright © 2024 CommuneRS\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "communeRS",
    "section": "",
    "text": "This is a Hack Day project from Collaborations Workshop 2024 organised by the Software Sustainability Institute.\n\nCommunity building is hard.\n\nIt’s difficult for small groups to get off the ground and maintain momentum once running. Many groups struggle with the same issues. Solutions can benefit the wider community – so how can community leaders avoid feelings of isolation and reinventing the wheel, and share knowledge and provide support across communities? Moreover, there may be small communities with overlapping interests who are not aware of each other.\n\n\nWe want community leaders to be able to find each other, support each other and collaborate.\n\nBuilding a community of communities will be hard.\n\nWe want to provide:\n\nA database of communities\nA channel for community leaders to communicate\nA list of resources that support community building\n\nFor the Hack Day, we are making a start on the communities database and the list of resources.\nWe are in conversation with The Turing Way about using their Slack space, as well as their expertise in community building, to develop and host a channel for community leaders to communicate. We will also reach out to the Center for Scientific Collaboration and Community Engagement about this project to see if there is scope for collaboration with them.\nWe will reach out to the leaders of the communities in our fledgling database to discuss with them whether they are interested in being involved in communeRS, and what sort of community it could be to serve them. We will spread the word in our networks. We envisage that communeRS will grow slowly, organically and collaboratively.\nWe strongly encourage contributions to the database and the resource list. The best way to do that at the moment is by opening an issue or pull request in the GitHub repo. In future, we plan to have a Google Form where community leaders can enter their community’s details, and have that update the database."
  },
  {
    "objectID": "CONTRIBUTING.html",
    "href": "CONTRIBUTING.html",
    "title": "Contributing to CommuneRS",
    "section": "",
    "text": "Thanks for taking the time to contribute to CommuneRS!\nThe following is a set of guidelines for contributing to CommuneRS, a community of communities. The goal of these guidelines is to make the development of the project efficient and sustainable and to ensure that every commit makes it better, more readable, more robust and better documented. Please, feel free suggest changes and improvements.\n(this guide is based on the Atom editor guide)\n\n\nCode of Conduct\nHow Can I Contribute?\n\nReporting Bugs\nSuggesting Enhancements\nYour First Code Contribution\nPull Requests\n\nStyleguides\n\nGit Commit Messages\nDocumentation Styleguide\n\n\n\n\nThis project and everyone participating in it is governed by the CommuneRS Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to the repository Administrator.\n\n\n\n\n\nThis section guides you through submitting a bug report for CommuneRS. Following these guidelines helps maintainers and the community understand your report :pencil:, reproduce the behavior :computer: :computer:, and find related reports :mag_right:.\nBefore creating bug reports, please check this list (including the closed issues) as you might find out that you don’t need to create one. When you are creating a bug report, please include as many details as possible.\n\nNote: If you find a Closed issue that seems like it is the same thing that you’re experiencing, open a new issue and include a link to the original issue in the body of your new one.\n\n\n\nBugs are tracked as GitHub issues. Explain the problem and include additional details to help maintainers reproduce the problem:\n\nUse a clear and descriptive title for the issue to identify the problem.\nDescribe the exact steps which reproduce the problem in as many details as possible.\nProvide specific examples to demonstrate the steps. Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you’re providing snippets in the issue, use Markdown code blocks.\nDescribe the behavior you observed after following the steps and point out what exactly is the problem with that behavior.\nExplain which behavior you expected to see instead and why.\nIf there is any error output in the temrinal, include that output with your report.\n\nProvide more context by answering these questions:\n\nDid the problem start happening recently or was this always a problem?\nCan you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens.\n\nInclude details about your configuration and environment:\n\nWhat’s the name and version of the OS you’re using?\n\n\n\n\n\nThis section guides you through submitting an enhancement suggestion for CommuneRS, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion :pencil: and find related suggestions :mag_right:.\nBefore creating enhancement suggestions, please check this list (including closed issues) as you might find out that you don’t need to create one. When you are creating an enhancement suggestion, please include as many details as possible.\n\n\nEnhancement suggestions are tracked as GitHub issues. Create an issue on that repository and provide the following information:\n\nUse a clear and descriptive title for the issue to identify the suggestion.\nProvide a step-by-step description of the suggested enhancement in as many details as possible.\nDescribe the current behavior and explain which behavior you expected to see instead and why.\nExplain why this enhancement would be useful\nSpecify the name and version of the OS you’re using.\n\n\n\n\n\nUnsure where to begin contributing to CommuneRS? You can start by looking through these beginner and help-wanted issues:\n\nBeginner issues - issues which should only require a few lines of code, and a test or two.\nHelp wanted issues - issues which should be a bit more involved than beginner issues.\n\n\n\n\nThe process described here has several goals:\n\nFix problems that are important to users\nEngage the community in working toward the best possible version of CommuneRS\nEnable a sustainable system for CommuneRS’s maintainers to review contributions\n\nPlease follow these steps to have your contribution considered by the maintainers:\n\nDescribe clearly what is the purpose of the pull request. Refer to the relevant issues on Bugs or\nEnhancements. In general, an issue should always be open prior to a pull request, to discuss\nits contents with a maintainer and make sure it makes sense for CommuneRS. If the pull request is a work in progress\nthat will take some time to be ready but still you want to discuss it with the community, open a\ndraft pull request.\nFollow the styleguides\n\nWhile the prerequisites above must be satisfied prior to having your pull request reviewed, the reviewer(s) may ask you to complete additional design work, tests, or other changes before your pull request can be ultimately accepted.\n\n\n\n\n\n\n\nUse the present tense (“Add feature” not “Added feature”)\nUse the imperative mood (“Move cursor to…” not “Moves cursor to…”)\nLimit the first line to 72 characters or less\nReference issues and pull requests liberally after the first line\nWhen only changing documentation, include [ci skip] in the commit title\nConsider starting the commit message with an applicable emoji:\n\n:art: :art: when improving the format/structure of the code\n:racehorse: :racehorse: when improving performance\n:non-potable_water: :non-potable_water: when plugging memory leaks\n:memo: :memo: when writing docs\n:penguin: :penguin: when fixing something on Linux\n:apple: :apple: when fixing something on macOS\n:checkered_flag: :checkered_flag: when fixing something on Windows\n:bug: :bug: when fixing a bug\n:fire: :fire: when removing code or files\n:green_heart: :green_heart: when fixing the CI build\n:white_check_mark: :white_check_mark: when adding tests\n:lock: :lock: when dealing with security\n:arrow_up: :arrow_up: when upgrading dependencies\n:arrow_down: :arrow_down: when downgrading dependencies\n:shirt: :shirt: when removing linter warnings\n\n\n\n\n\n\nUse Markdown.\nReference methods and classes in markdown with the custom {} notation:\n\nReference classes with {ClassName}\nReference instance methods with {ClassName::methodName}\nReference class methods with {ClassName.methodName}"
  },
  {
    "objectID": "CONTRIBUTING.html#table-of-contents",
    "href": "CONTRIBUTING.html#table-of-contents",
    "title": "Contributing to CommuneRS",
    "section": "",
    "text": "Code of Conduct\nHow Can I Contribute?\n\nReporting Bugs\nSuggesting Enhancements\nYour First Code Contribution\nPull Requests\n\nStyleguides\n\nGit Commit Messages\nDocumentation Styleguide"
  },
  {
    "objectID": "CONTRIBUTING.html#code-of-conduct",
    "href": "CONTRIBUTING.html#code-of-conduct",
    "title": "Contributing to CommuneRS",
    "section": "",
    "text": "This project and everyone participating in it is governed by the CommuneRS Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to the repository Administrator."
  },
  {
    "objectID": "CONTRIBUTING.html#how-can-i-contribute",
    "href": "CONTRIBUTING.html#how-can-i-contribute",
    "title": "Contributing to CommuneRS",
    "section": "",
    "text": "This section guides you through submitting a bug report for CommuneRS. Following these guidelines helps maintainers and the community understand your report :pencil:, reproduce the behavior :computer: :computer:, and find related reports :mag_right:.\nBefore creating bug reports, please check this list (including the closed issues) as you might find out that you don’t need to create one. When you are creating a bug report, please include as many details as possible.\n\nNote: If you find a Closed issue that seems like it is the same thing that you’re experiencing, open a new issue and include a link to the original issue in the body of your new one.\n\n\n\nBugs are tracked as GitHub issues. Explain the problem and include additional details to help maintainers reproduce the problem:\n\nUse a clear and descriptive title for the issue to identify the problem.\nDescribe the exact steps which reproduce the problem in as many details as possible.\nProvide specific examples to demonstrate the steps. Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you’re providing snippets in the issue, use Markdown code blocks.\nDescribe the behavior you observed after following the steps and point out what exactly is the problem with that behavior.\nExplain which behavior you expected to see instead and why.\nIf there is any error output in the temrinal, include that output with your report.\n\nProvide more context by answering these questions:\n\nDid the problem start happening recently or was this always a problem?\nCan you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens.\n\nInclude details about your configuration and environment:\n\nWhat’s the name and version of the OS you’re using?\n\n\n\n\n\nThis section guides you through submitting an enhancement suggestion for CommuneRS, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion :pencil: and find related suggestions :mag_right:.\nBefore creating enhancement suggestions, please check this list (including closed issues) as you might find out that you don’t need to create one. When you are creating an enhancement suggestion, please include as many details as possible.\n\n\nEnhancement suggestions are tracked as GitHub issues. Create an issue on that repository and provide the following information:\n\nUse a clear and descriptive title for the issue to identify the suggestion.\nProvide a step-by-step description of the suggested enhancement in as many details as possible.\nDescribe the current behavior and explain which behavior you expected to see instead and why.\nExplain why this enhancement would be useful\nSpecify the name and version of the OS you’re using.\n\n\n\n\n\nUnsure where to begin contributing to CommuneRS? You can start by looking through these beginner and help-wanted issues:\n\nBeginner issues - issues which should only require a few lines of code, and a test or two.\nHelp wanted issues - issues which should be a bit more involved than beginner issues.\n\n\n\n\nThe process described here has several goals:\n\nFix problems that are important to users\nEngage the community in working toward the best possible version of CommuneRS\nEnable a sustainable system for CommuneRS’s maintainers to review contributions\n\nPlease follow these steps to have your contribution considered by the maintainers:\n\nDescribe clearly what is the purpose of the pull request. Refer to the relevant issues on Bugs or\nEnhancements. In general, an issue should always be open prior to a pull request, to discuss\nits contents with a maintainer and make sure it makes sense for CommuneRS. If the pull request is a work in progress\nthat will take some time to be ready but still you want to discuss it with the community, open a\ndraft pull request.\nFollow the styleguides\n\nWhile the prerequisites above must be satisfied prior to having your pull request reviewed, the reviewer(s) may ask you to complete additional design work, tests, or other changes before your pull request can be ultimately accepted."
  },
  {
    "objectID": "CONTRIBUTING.html#styleguides",
    "href": "CONTRIBUTING.html#styleguides",
    "title": "Contributing to CommuneRS",
    "section": "",
    "text": "Use the present tense (“Add feature” not “Added feature”)\nUse the imperative mood (“Move cursor to…” not “Moves cursor to…”)\nLimit the first line to 72 characters or less\nReference issues and pull requests liberally after the first line\nWhen only changing documentation, include [ci skip] in the commit title\nConsider starting the commit message with an applicable emoji:\n\n:art: :art: when improving the format/structure of the code\n:racehorse: :racehorse: when improving performance\n:non-potable_water: :non-potable_water: when plugging memory leaks\n:memo: :memo: when writing docs\n:penguin: :penguin: when fixing something on Linux\n:apple: :apple: when fixing something on macOS\n:checkered_flag: :checkered_flag: when fixing something on Windows\n:bug: :bug: when fixing a bug\n:fire: :fire: when removing code or files\n:green_heart: :green_heart: when fixing the CI build\n:white_check_mark: :white_check_mark: when adding tests\n:lock: :lock: when dealing with security\n:arrow_up: :arrow_up: when upgrading dependencies\n:arrow_down: :arrow_down: when downgrading dependencies\n:shirt: :shirt: when removing linter warnings\n\n\n\n\n\n\nUse Markdown.\nReference methods and classes in markdown with the custom {} notation:\n\nReference classes with {ClassName}\nReference instance methods with {ClassName::methodName}\nReference class methods with {ClassName.methodName}"
  }
]